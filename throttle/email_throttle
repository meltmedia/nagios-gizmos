#!/usr/bin/python

from pprint import pprint
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText

import argparse
import copy
import datetime
import hashlib
import logging
import markdown
import os
import smtplib
import sqlite3
import subprocess
import sys

log = logging.getLogger("email.throttle")

mail_settings = {
  "host": "localhost",
  "port": "25",
  "username": None,
  "password": None,
  "from": "nagios@example.com"
}

sql = {
  "create": "create table if not exists 'throttle' ('hash' text PRIMARY KEY, 'email' text, 'subject' text, 'group' text, 'date' timestamp, 'count' integer)",
  "select": "select `hash`, `date`, `count`, `group`, `email`, `subject` from `throttle` where `hash` = ?",
  "insert": "insert into `throttle` values (?, ?, ?, ?, ?, ?)",
  "update": "update `throttle` set `count` = ? where `hash` = ?",
  "delete": "delete from `throttle` where `hash` = ?",
  "select_all": "select `hash`, `date`, `count`, `group`, `email`, `subject` from `throttle` order by `date`"
}

def configure_logger(args):
  hdlr = logging.FileHandler(args.log)
  formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
  hdlr.setFormatter(formatter)
  log.addHandler(hdlr)

  numeric_level = getattr(logging, args.level.upper(), None)
  if not isinstance(numeric_level, int):
    raise ValueError('Invalid log level: %s' % args.level)

  log.setLevel(numeric_level)

def connect(args):
  connection = None

  if not os.path.exists("%s%s" % (args.temp, args.database)):
    connection = sqlite3.connect("%s%s" % (args.temp, args.database), detect_types=sqlite3.PARSE_DECLTYPES)

    connection.cursor().execute(sql['create'])
  else:
    connection = sqlite3.connect("%s%s" % (args.temp, args.database), detect_types=sqlite3.PARSE_DECLTYPES)

  connection.row_factory = sqlite3.Row

  return connection

def remove_hash(cursor, hash):
  cursor.executemany(sql['delete'], hash)

def update_hash(cursor, args, count):
  cursor.execute(sql['update'], (count + 1, args.hash, ))

def send_mail(args, remove_temp=True):
  messages = ""

  if os.path.exists(args.message_file) and os.stat(args.message_file).st_size > 0:
    with open(args.message_file, "r") as cf:
      lines = cf.readlines()
      messages = "".join(lines)

  if remove_temp:
    remove_temp_email(args)
  
  message_body = None

  if len(messages) > 0:
    message_body = "%s\n\n%s" % (args.message, messages)
  else:
    message_body = args.message

  if message_body is None or len(message_body) <= 0:
    log.info("empty message, not sending")
    return

  log.debug("email to: '%s', from: '%s', subject: '%s', message: '%s'" % (args.email, args.from_email, args.subject, message_body.replace('\n', '')))

  msg = MIMEMultipart('alternative')
  msg['Subject'] = replace_fields(args.subject, args)
  msg['From'] = args.from_email
  msg['To'] = args.email

  message_body = replace_fields(message_body, args)

  part1 = MIMEText(message_body, 'plain')
  part2 = MIMEText(markdown.markdown(message_body), 'html')

  msg.attach(part1)
  msg.attach(part2)

  smtp = smtplib.SMTP()
  smtp.connect(mail_settings["host"], mail_settings["port"])
  
  if mail_settings["username"] is not None:
    smtp.login(mail_settings["username"], mail_settings["password"])
  
  smtp.sendmail(args.from_email, args.email, msg.as_string())
  smtp.quit()

def write_message(args):
  with open(args.message_file, "a") as cf:
    cf.write(args.message_format % (args.subject, args.message))

def remove_temp_email(args):
  if os.path.exists(args.message_file):
    os.remove(args.message_file)

def replace_fields(msg, args):
  for org, rep in {"{hash}": args.hash, "{group}": args.group, "{email}": args.email, "{date}": str(args.date) }.iteritems():
    msg = msg.replace(org, rep)
  
  return msg

def parse_arguments(extra=None):
  parser = argparse.ArgumentParser()

  parser.add_argument('-i', '--initial', help='Number of seconds to wait before throttling', type=int, default=180)
  parser.add_argument('-c', '--count', help='Number of emails to send before throttling, supersedes initial wait', type=int)
  parser.add_argument('-w', '--wait', help='Number of seconds to wait between bulk messages', type=int, default=900)

  parser.add_argument('-H', '--hash', help='Hash identifier, supersedes group')
  parser.add_argument('-g', '--group', help='Group identifier, will be hashed for use', default='default')
  parser.add_argument('--group_subject', action='count', help='Use the emails subject for group, supersedes group')
  parser.add_argument('--ignore_group', action='count', help='Do not include the group in the hash')
  parser.add_argument('--ignore_email', action='count', help='Do not include the email address in the hash')

  parser.add_argument('-m', '--message', help='Message')
  parser.add_argument('-s', '--subject', help='Subject')
  parser.add_argument('-e', '--email', help='To Email address')
  parser.add_argument('-f', '--from_email', help='From Email Address', default=mail_settings["from"])
  parser.add_argument('-d', '--date', help='Date of the event', default=str(datetime.datetime.now()))
  parser.add_argument('--message_format', help='Format to use for storing messages (subject, then message)', default='***\n#### %s\n\n%s\n\n\n')

  parser.add_argument('--temp', help='Temp directory to store information', default='/tmp/email-alerts')
  parser.add_argument('--database', help='Database file name', default='throttle.db')

  parser.add_argument('--force', action='count', help='Always throttle')
  parser.add_argument('--send', action='count', help='Always send')

  parser.add_argument('--log', help='Log file to write to', default='/var/log/nagios3/email-throttle.log')
  parser.add_argument('--level', help='Logging level', default="info")

  parser.add_argument('--job', action='count', help='Run in cron job cleanup mode')
  parser.add_argument('--skip_original_email', action='count', help='When running in clean up mode, do not send to the original sender')

  args = parser.parse_args()

  # Normalize temp
  if not args.temp.endswith('/'):
    args.temp += '/'

  if not os.path.exists(args.temp):
    os.makedirs(args.temp)

  return args

def normalize_args(args, extra=None):
  if extra is None:
    if args.hash is None or len(args.hash) <= 0:
      # Hash options: ignore_email, group_subject, ignore_group
      hashstring = ""

      if not args.ignore_email:
        hashstring += args.email

      if args.group_subject:
        hashstring += args.subject

      if not args.ignore_group:
        hashstring += args.group

      args.hash = hashlib.sha256(hashstring).hexdigest()

    if args.message is None or len(args.message) <= 0:
      lines = sys.stdin.readlines()
      args.message = "".join(lines)

    args.message_file = "%s%s.txt" % (args.temp, args.hash) 
  
    return args
  else:
    arguments = copy.copy(args)

    arguments.hash = extra["hash"]
    arguments.date = extra["date"]
    arguments.group = extra["group"]

    arguments.message_file = "%s%s.txt" % (arguments.temp, arguments.hash) 

    return arguments

  return None

def process_notification(connection, cursor, arguments):
  args = normalize_args(arguments)

  if args.send:
    log.debug("message must send")
    send_mail(args)
    return

  cursor.execute(sql['select'], (args.hash, ))

  row = cursor.fetchone()

  if row is not None:
    initial_delta = datetime.timedelta(seconds=args.initial)
    wait_delta = datetime.timedelta(seconds=args.wait)

    current_time = datetime.datetime.now()

    time_delta = current_time - row['date']

    if args.count is not None and row['count'] < args.count and not args.force:
      log.debug("not throttled by count: %s < %s" % (row['count'], args.count))

      update_hash(cursor, args, row['count'])
      send_mail(args)
    elif time_delta < initial_delta and not args.force and args.count is None:
      log.debug("not throttled by time: %s > %s" % (initial_delta, time_delta))

      update_hash(cursor, args, row['count'])
      send_mail(args)
    elif time_delta < wait_delta:
      log.debug("throttling, write to file: %s > %s" % (wait_delta, time_delta))

      update_hash(cursor, args, row['count'])
      write_message(args)
    else:
      log.debug("passed window, send '%s => %s' w/ file if not empty" % (args.hash, row['group']))

      remove_hash(cursor, (args.hash, ))
      send_mail(args)

  else:
    log.debug("message has a new hash: %s" % (args.hash))
    cursor.execute(sql['insert'], (args.hash, args.email, args.subject, args.group, args.date, 1, ))
  
    if args.force:
      log.debug("forced throttling")

      write_message(args)
    else:
      send_mail(args)

def process_job(connection, cursor, args):
  rows = cursor.execute(sql['select_all'])
  processed = []
  log.debug("Running nagios throttle job")

  for row in rows:
    wait_delta = datetime.timedelta(seconds=args.wait)
    current_time = datetime.datetime.now()

    time_delta = current_time - row[1]

    if time_delta > wait_delta:
      log.debug("wait window has been passed for '%s': %s > %s" % (row[3], time_delta, wait_delta))
      arguments = normalize_args(args, { "hash": row['hash'], "date": row['date'], "group": row['group'] })
      
      # Set Subject and message if none
      if arguments.subject is None:
        if row['subject'] is not None:
          arguments.subject = row['subject']
        else:
          arguments.subject = "[{group}] Throttled Service/Host Notifications"

      if arguments.message is None:
        arguments.message = ""

      if arguments.email is not None:
        send_mail(arguments, remove_temp=False)

      if not arguments.skip_original_email:
        arguments.email = row[4]
        send_mail(arguments)

      processed.append((arguments.hash, ))
      remove_temp_email(arguments)

  remove_hash(cursor, processed)

if __name__ == "__main__":
  try:
    args = parse_arguments()
  except Exception, e:
    log.critical("Error Parsing Arguments: %s" % (e))
    raise e

  configure_logger(args)

  connection = None
  cursor = None

  try:
    connection = connect(args)
    cursor = connection.cursor()
  except Exception, e:
    log.critical("Error connecting to database: %s" % (e))
    raise e

  try:
    if not args.job:
      process_notification(connection, cursor, args)
    else:
      process_job(connection, cursor, args)
  except Exception, e:
    log.critical("Unable to process request: %s" % (e))
    raise e

  connection.commit()
  cursor.close()
  connection.close()
